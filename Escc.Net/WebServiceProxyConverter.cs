using System;
using System.Globalization;
using System.IO;
using System.Xml;
using System.Xml.Serialization;

namespace Escc.Net
{
    /// <summary>
    /// Convert an object between its original type and its proxy representation returned by a web service
    /// </summary>
    /// <typeparam name="TDataObjectType">The original <see cref="System.Type"/> of the data object returned by the web service.</typeparam>
    /// <typeparam name="TProxyObjectType">The <see cref="System.Type"/> of the object returned by the web service proxy</typeparam>
    /// <remarks>This was designed to work with .NET 2.0 ASMX web services, but would work equally well with any two classes that share the same XML serialisation format.</remarks>
    public class WebServiceProxyConverter<TDataObjectType, TProxyObjectType> : IProxyObjectConverter<TDataObjectType, TProxyObjectType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebServiceProxyConverter&lt;ProxyObjectType, DataObjectType&gt;"/> class.
        /// </summary>
        /// <param name="webServiceNamespace">The web service namespace.</param>
        /// <param name="dataObjectXmlNamespace">The data object's XML namespace.</param>
        /// <remarks>
        /// <para>Your web method returns an object of type "MyNamespace.MyType". When you call the web method from another project, the type
        /// you get back is one generated by the proxy, "WebReferenceNamespace.MyType". If you need to use some logic contained within
        /// "MyNamespace.MyType", it's not available. If you need to pass the object to a method which expects an instance of
        /// "MyNamespace.MyType", you can't. But if you pass your instance of "WebReferenceNamespace.MyType" to <see cref="ConvertProxyToOriginalType"/>
        /// you can turn it into an instance of "MyNamespace.MyType" which you <b>can</b> use.</para>
        /// <para>It's more complicated when the original type specifies an XML namespace for use when serialised. In that case the same namespace
        /// must be present in the XML root element in order to deserialise it to the original type. However, a web service proxy object puts the root
        /// element of the proxy type in the web service's own namespace. There are three possible solutions:</para>
        /// <list type="bullet">
        /// <item>Use the same namespace for the web service as for the type being returned (which may not be appropriate)</item>
        /// <item>Return the namespaced object inside some other container object, such as a collection (fine if you can alter the web service)</item>
        /// <item>Replace the namespace before deserialising the XML (implemented using the dataObjectXmlNamespace parameter of this class)</item>
        /// </list>
        /// </remarks>
        public WebServiceProxyConverter(string webServiceNamespace, string dataObjectXmlNamespace)
        {
            this.WebServiceNamespace = webServiceNamespace;
            this.DataObjectXmlNamespace = dataObjectXmlNamespace;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebServiceProxyConverter&lt;DataObjectType, ProxyObjectType&gt;"/> class.
        /// </summary>
        /// <param name="webServiceNamespace">The web service namespace.</param>
        public WebServiceProxyConverter(string webServiceNamespace)
        {
            this.WebServiceNamespace = webServiceNamespace;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebServiceProxyConverter{DataObjectType, ProxyObjectType}"/> class.
        /// </summary>
        public WebServiceProxyConverter()
        {
            
        }

        /// <summary>
        /// Gets or sets the web service namespace.
        /// </summary>
        /// <value>
        /// The web service namespace.
        /// </value>
        public string WebServiceNamespace { get; set; }

        /// <summary>
        /// Gets or sets the data object's XML namespace.
        /// </summary>
        /// <value>
        /// The data object XML namespace.
        /// </value>
        public string DataObjectXmlNamespace { get; set; }

        /// <summary>
        /// Converts a proxy object returned by a web service to its original type
        /// </summary>
        /// <param name="proxyObject">The proxy object</param>
        /// <returns>An instance of the original type, reserialised from the data contained in the proxy</returns>
        /// <example>
        /// <code>
        /// using EsccWebTeam.Events.Common;
        /// using EsccWebTeam.Data.Xml;
        /// 
        /// // call the web service and get back a proxy event
        /// EventCalendarWS.EventItem proxyEvent = EventCalendarWS.ExampleWebMethod(); 
        ///             
        /// // create an instance of a helper class which can convert it
        /// ProxyObjectConverter&lt;EsccWebTeam.Events.Common.EventItem, EventCalendarWS.EventItem&gt; proxyHelper = new ProxyObjectConverter&lt;EsccWebTeam.Events.Common.EventItem, EventCalendarWS.EventItem&gt;("http://czoneapps.eastsussex.gov.uk/Czone.WebService.EventCalendar/", typeof(EsccWebTeam.Events.Common.EventItem), typeof(EventCalendarWS.EventItem));
        /// 
        /// // convert the proxy event into a real event
        /// EsccWebTeam.Events.Common.EventItem convertedEvent = proxyHelper.ConvertProxyToOriginalType(proxyEvent);
        /// </code>
        /// </example>
        /// <seealso cref="ConvertOriginalTypeToProxy"/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2202:Do not dispose objects multiple times")]
        public TDataObjectType ConvertProxyToOriginalType(TProxyObjectType proxyObject)
        {
            var ser1 = new XmlSerializer(typeof(TProxyObjectType), this.WebServiceNamespace);
            var ser2 = new XmlSerializer(typeof(TDataObjectType), this.WebServiceNamespace);
            string xml;

            // Serialize the webservice object to XML
            using (var textWriter = new StringWriter(CultureInfo.CurrentCulture))
            {
                ser1.Serialize(textWriter, proxyObject);
                xml = textWriter.ToString();
            }

            // If necessary, replace the web service namespace before rehydrating
            if (this.DataObjectXmlNamespace != null)
            {
                var dom = new XmlDocument();
                dom.LoadXml(xml);
                if (dom.DocumentElement!= null && dom.DocumentElement.NamespaceURI == this.WebServiceNamespace)
                {
                    dom.DocumentElement.Attributes["xmlns"].Value = this.DataObjectXmlNamespace;
                    xml = dom.OuterXml;
                }
            }

            // Deserialize the XML to the original type
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(xml);
                using (var xmlReader = new XmlTextReader(stringReader))
                {
                    return (TDataObjectType)ser2.Deserialize(xmlReader);
                }
            }
            finally            
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Converts an original type to its web service proxy representation.
        /// </summary>
        /// <param name="dataObject">The data object.</param>
        /// <returns>Web service proxy object</returns>
        /// <seealso cref="ConvertProxyToOriginalType"/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2202:Do not dispose objects multiple times")]
        public TProxyObjectType ConvertOriginalTypeToProxy(TDataObjectType dataObject)
        {
            var ser1 = new XmlSerializer(typeof(TDataObjectType), this.WebServiceNamespace);
            var ser2 = new XmlSerializer(typeof(TProxyObjectType), this.WebServiceNamespace);
            string xml;

            // Serialize the webservice object to XML
            using (TextWriter textWriter = new StringWriter(CultureInfo.CurrentCulture))
            {
                ser1.Serialize(textWriter, dataObject);
                xml = textWriter.ToString();
            }

            // If necessary, replace the data object namespace before rehydrating
            if (this.DataObjectXmlNamespace != null)
            {
                var dom = new XmlDocument();
                dom.LoadXml(xml);
                if (dom.DocumentElement != null && dom.DocumentElement.NamespaceURI == this.DataObjectXmlNamespace)
                {
                    dom.DocumentElement.Attributes["xmlns"].Value = this.WebServiceNamespace;
                    xml = dom.OuterXml;
                }
            }

            // Deserialize the XML to the original type
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(xml);
                using (var xmlReader = new XmlTextReader(stringReader))
                {
                    return (TProxyObjectType)ser2.Deserialize(xmlReader);
                }
            }
            finally
            {
                if (stringReader != null)
                {
                    stringReader.Dispose();
                }
            }
        }
    }

}
